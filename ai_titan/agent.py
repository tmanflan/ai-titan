#!/usr/bin/env python3
"""
Automated DeepSeek Agent Runner
Usage: python run_agent.py "Your prompt here"
"""

import sys
import argparse
from openai import OpenAI

def generate_demo_response(prompt):
    """
    Generate a demo response when API is unavailable
    """
    if "function" in prompt.lower() or "code" in prompt.lower():
        return f"""# Demo Response for: {prompt[:50]}...

def example_function():
    '''
    This is a demo response since the DeepSeek API is currently unavailable.
    In a real scenario, this would be generated by DeepSeek Coder.
    '''
    return "Hello from DeepSeek Agent Demo Mode!"

# Usage example:
result = example_function()
print(result)

Note: This is a demo response. Please check your API key and balance for actual DeepSeek responses."""
    else:
        return f"""Demo Response for: "{prompt[:50]}..."

This is a demonstration response since the DeepSeek API is currently unavailable.
This could be due to:
- Insufficient API balance
- Network connectivity issues
- API key issues

In a real scenario, DeepSeek Coder would provide a detailed, AI-generated response to your prompt.

To get actual responses:
1. Check your DeepSeek API balance
2. Verify your API key is correct
3. Ensure you have internet connectivity

Note: This is a demo response generated locally."""

def run_deepseek_agent(prompt, model="deepseek-coder", temperature=0.7, max_tokens=1000):
    """
    Run the DeepSeek agent with the given prompt
    
    Args:
        prompt (str): The prompt to send to the agent
        model (str): The model to use (default: deepseek-coder)
        temperature (float): Temperature for response generation (default: 0.7)
        max_tokens (int): Maximum tokens in response (default: 1000)
    
    Returns:
        str: The agent's response
    """
    try:
        # Initialize DeepSeek client
        client = OpenAI(
            api_key="sk-559cc33a3eb34f7ab59cf4e2f627a644",
            base_url="https://api.deepseek.com"
        )
        
        # Make the API call
        response = client.chat.completions.create(
            model=model,
            messages=[{"role": "user", "content": prompt}],
            temperature=temperature,
            max_tokens=max_tokens
        )
        
        return response.choices[0].message.content
        
    except Exception as e:
        error_msg = str(e)
        print(f"‚ö†Ô∏è  API Error: {error_msg}")
        print("üîÑ Switching to demo mode...\n")
        return generate_demo_response(prompt)

def main():
    parser = argparse.ArgumentParser(
        description="Automated DeepSeek Agent Runner",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Examples:
  python run_agent.py "Write a Python function to calculate fibonacci numbers"
  python run_agent.py "Explain how to use React hooks" --model deepseek-coder
  python run_agent.py "Debug this code: print('hello world'" --temperature 0.5
        """
    )
    
    parser.add_argument(
        "prompt", 
        nargs="?",
        help="The prompt to send to the DeepSeek agent"
    )
    
    parser.add_argument(
        "--model", 
        default="deepseek-coder",
        help="Model to use (default: deepseek-coder)"
    )
    
    parser.add_argument(
        "--temperature", 
        type=float, 
        default=0.7,
        help="Temperature for response generation (default: 0.7)"
    )
    
    parser.add_argument(
        "--max-tokens", 
        type=int, 
        default=1000,
        help="Maximum tokens in response (default: 1000)"
    )
    
    parser.add_argument(
        "--interactive", 
        action="store_true",
        help="Run in interactive mode"
    )
    
    args = parser.parse_args()
    
    if args.interactive:
        print("DeepSeek Agent - Interactive Mode")
        print("Type 'quit' or 'exit' to stop\n")
        
        while True:
            try:
                prompt = input("Enter your prompt: ").strip()
                if prompt.lower() in ['quit', 'exit', 'q']:
                    print("Goodbye!")
                    break
                
                if not prompt:
                    continue
                
                print("\nü§ñ DeepSeek Agent Response:")
                print("-" * 50)
                response = run_deepseek_agent(
                    prompt, 
                    args.model, 
                    args.temperature, 
                    args.max_tokens
                )
                print(response)
                print("-" * 50)
                print()
                
            except KeyboardInterrupt:
                print("\nGoodbye!")
                break
            except Exception as e:
                print(f"Error: {e}")
    else:
        # Single prompt mode
        if not args.prompt:
            parser.error("prompt is required when not in interactive mode")
        
        print("ü§ñ DeepSeek Agent Response:")
        print("-" * 50)
        response = run_deepseek_agent(
            args.prompt, 
            args.model, 
            args.temperature, 
            args.max_tokens
        )
        print(response)
        print("-" * 50)

if __name__ == "__main__":
    main()